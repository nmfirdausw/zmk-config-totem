//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄
       

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define BSE 0
#define NUM 1
#define SYM 2
#define NBR 3
#define CTR 4
#define ADJ 5
#define FNP 6

&lt {
    tapping-term-ms = <100>;
    quick-tap-ms = <0>;
    retro-tap;
    flavor = "hold-preferred";
};

&mt {
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
};

/ {
    behaviors {
        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        mo_sl: behavior_mo_sl {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&sl>;
        };
    };

    combos {
            compatible = "zmk,combos";
            combo_adj {
                timeout-ms = <100>;
                key-positions = <11 12 13>;
                bindings = <&tog ADJ>;
            };
            combo_fnp {
                timeout-ms = <100>;
                key-positions = <6 7 8>;
                bindings = <&tog FNP>;
            };
            combo_esc {
                timeout-ms = <100>;
                key-positions = <1 2>;
                bindings = <&kp ESC>;
            };
            combo_ctr {
                timeout-ms = <100>;
                key-positions = <16 17 18>;
                bindings = <&tog CTR>;
            };
            combo_cap {
                timeout-ms = <100>;
                key-positions = <10 11 12>;
                bindings = <&kp CAPS>;
            };
            combo_glb {
                timeout-ms = <100>;
                key-positions = <21 22>;
                bindings = <&kp GLOBE>;
            };
            combo_ret {
                timeout-ms = <100>;
                key-positions = <18 19>;
                bindings = <&kp RET>;
            };
            combo_bsp {
                timeout-ms = <100>;
                key-positions = <7 8>;
                bindings = <&kp BSPC>;
            };
            combo_tab {
                timeout-ms = <100>;
                key-positions = <10 11>;
                bindings = <&kp TAB>;
            };
    };

    keymap {
        compatible = "zmk,keymap";
        bse_layer {
            label= "BSE";
            bindings = <
                         &kp W        &kp L        &kp Y           &kp P           &kp B             &kp Z          &kp F           &kp O           &kp U       &kp SQT
                         &mt LCTRL C  &mt LALT R   &mt LCMD S      &mt LSHFT T     &kp G             &kp M          &mt RSHFT N     &mt RCMD E      &mt RALT I  &mt RCTRL A
                &kp ESC  &kp Q        &kp J        &kp V           &kp D           &kp K             &kp X          &kp H           &kp COMMA       &kp PERIOD  &kp FSLH     &kp RET
                                                   &mo_sl SYM SYM  &mo_sl NUM NUM  &lt CTR SPACE     &lt CTR SPACE  &mo_sl NUM NUM  &mo_sl SYM SYM
            >;
        };
        num_layer {
            label= "NUM";
            bindings = <
                        &kp N1           &kp N2  &kp N3  &kp N4  &kp N5     &kp N6  &kp N7        &kp N8       &kp N9       &kp N0
                        &mt LCTRL TILDE  &trans  &trans  &trans  &trans     &trans  &mt RSHFT N4  &mt RCMD N5  &mt RALT N6  &kp COLON
                &trans  &trans           &trans  &trans  &trans  &trans     &kp N0  &kp N1        &kp N2       &kp N3       &trans     &trans
                                                 &trans  &none   &trans     &trans  &none         &trans
            >;
        };
        sym_layer {
            label= "SYM";
            bindings = <
                        &kp EXCL         &kp AT         &kp HASH       &kp DLLR         &kp PRCNT     &kp CARET  &kp AMPS         &kp LPAR       &kp RPAR       &kp DQT
                        &mt LCTRL GRAVE  &mt LALT LBRC  &mt LCMD RBRC  &mt LSHFT UNDER  &kp SQT       &kp STAR   &mt RSHFT MINUS  &mt RCMD LBKT  &mt RALT RBKT  &mt RCTRL SEMI
                &trans  &trans           &trans         &trans         &kp PLUS         &kp PIPE      &kp BSLH   &kp EQUAL         &kp LT         &kp GT         &kp QMARK          &trans
                                                        &none          &mo_sl NBR NBR   &none         &trans     &mo_sl NBR NBR   &none
            >;
        };
        nbr_layer {
            label= "NBR";
            bindings = <
                        &kp N1           &kp N2   &kp N3  &kp N4  &kp N5     &kp N6  &kp N7        &kp N8       &kp N9       &kp N0
                        &mt LCTRL TILDE  &kp TAB  &trans  &trans  &trans     &trans  &mt RSHFT N4  &mt RCMD N5  &mt RALT N6  &kp COLON
                &trans  &trans           &trans   &trans  &trans  &trans     &kp N0  &kp N1        &kp N2       &kp N3       &trans     &trans
                                                  &none   &none   &trans     &trans  &none         &none
            >;
        };
        ctr_layer {
            label= "CTR";
            bindings = <
                        &trans  &kp ESC  &kp ESC  &trans  &trans     &trans    &kp HOME  &kp PG_UP  &kp BSPC   &trans
                        &trans  &trans   &trans   &trans  &trans     &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT  &kp RET
                &trans  &trans  &trans   &trans   &trans  &trans     &trans    &kp END   &kp PG_DN  &trans     &trans   &trans
                                         &trans   &trans  &trans     &trans    &trans    &trans
            >;
        };
        adj_layer {
            label= "ADJ";
            bindings = <
                       &none  &none     &kp C_BRI_DN  &kp C_BRI_UP  &bt BT_NXT     &none  &none  &none  &none  &none 
                       &none  &none     &kp C_VOL_DN  &kp C_VOL_UP  &bt BT_CLR     &none  &none  &none  &none  &none
                &none  &none  &kp C_PP  &kp C_PREV    &kp C_NEXT    &bt BT_PRV     &none  &none  &none  &none  &none  &none 
                                        &none         &none         &none          &none  &none  &none
            >;
        };
        fnp_layer {
            label= "FNP";
            bindings = <
                        &kp F1        &kp F2       &kp F3       &kp F4        &none      &kp KP_SLASH  &kp KP_N7        &kp KP_N8       &kp KP_N9       &kp KP_PLUS
                        &mt LCTRL F5  &mt LALT F6  &mt LCMD F7  &mt LSHFT F8  &none      &kp COMMA     &mt RSHFT KP_N4  &mt RCMD KP_N5  &mt RALT KP_N6  &mt RCTRL KP_MINUS
                &trans  &kp F9        &kp F10      &kp F11      &kp F12       &none      &kp PERIOD    &kp KP_N1        &kp KP_N2       &kp KP_N3       &kp KP_MULTIPLY     &trans
                                                   &trans       &trans        &trans     &trans        &trans           &trans
            >;
        };
    };
};
